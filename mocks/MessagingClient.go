// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	messaging "github.com/pongsatt/go-rpc/messaging"
	mock "github.com/stretchr/testify/mock"
)

// MessagingClient is an autogenerated mock type for the MessagingClient type
type MessagingClient struct {
	mock.Mock
}

// Consume provides a mock function with given fields: topic, groupID, handler
func (_m *MessagingClient) Consume(topic string, groupID string, handler func(*messaging.Msg) error) error {
	ret := _m.Called(topic, groupID, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(*messaging.Msg) error) error); ok {
		r0 = rf(topic, groupID, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsLocalConsume provides a mock function with given fields: topic, key
func (_m *MessagingClient) IsLocalConsume(topic string, key string) (bool, error) {
	ret := _m.Called(topic, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(topic, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(topic, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Publish provides a mock function with given fields: msg
func (_m *MessagingClient) Publish(msg *messaging.Msg) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*messaging.Msg) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
